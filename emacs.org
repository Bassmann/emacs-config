#+TITLE: Martins Emacs Start
#+OPTIONS: html-postamble:nil html-preamble:t tex:t
#+OPTIONS: toc:3 num:nil ^:nil creator:nil timestamp:nil d:t
* Table of content                                                    :TOC_3:
- [[#introduction][Introduction]]
- [[#basics][Basics]]
    - [[#load-the-local-file][Load the local file]]
    - [[#move-customizations-into-their-own-file][Move customizations into their own file]]
    - [[#set-the-default-font-and-frame-config][Set the default font and frame config]]
    - [[#maximize-by-default][Maximize by default]]
    - [[#garbage-collect-on-focus-out-emacs-should-feel-snappier][Garbage-collect on focus-out, Emacs /should/ feel snappier.]]
    - [[#set-coding-system][Set coding system]]
    - [[#theme][Theme]]
    - [[#backup][Backup]]
- [[#general-configuration][General configuration]]
    - [[#ace-windows][ACE-Windows]]
    - [[#aliases][Aliases]]
    - [[#appointments][Appointments]]
    - [[#auto-revert][Auto-revert]]
    - [[#auto-save][Auto-save]]
    - [[#calendar][Calendar]]
    - [[#custom][Custom]]
    - [[#dashboard][Dashboard]]
    - [[#date2name][date2name]]
    - [[#dimish][Dimish]]
    - [[#dired][Dired]]
    - [[#display][Display]]
    - [[#delete-duplicate-entries-of-the-history-of-the-minibuffer][Delete duplicate entries of the history of the minibuffer]]
    - [[#emacs-server][Emacs Server]]
    - [[#filetagsel][filetags.el]]
    - [[#golden-ratio-scrolling][Golden ratio scrolling]]
    - [[#helpful][Helpful]]
    - [[#highlight-the-current-line][Highlight the current line]]
    - [[#ido-mode][Ido-mode]]
    - [[#ivy][Ivy]]
    - [[#keyboard-settings][Keyboard settings]]
    - [[#menu-bar][Menu bar]]
    - [[#minimal][Minimal]]
    - [[#minions][Minions]]
    - [[#mode-icons---show-icons-instead-of-mode-names][mode-icons - Show icons instead of mode names]]
    - [[#modernized-package-menu][Modernized Package Menu]]
    - [[#moody][Moody]]
    - [[#msb-mode][msb-Mode]]
    - [[#no-blinking-cursor][No blinking cursor]]
    - [[#no-toolbar-and-no-scrollbar][No toolbar and no scrollbar]]
    - [[#recentf][Recentf]]
    - [[#saveplace][Saveplace]]
    - [[#smooth-scrolling][Smooth scrolling]]
    - [[#time][Time]]
    - [[#uniquify][Uniquify]]
    - [[#visualise-whitespace][Visualise whitespace]]
    - [[#which-key][Which-key]]
- [[#editing-related-items][Editing related items]]
    - [[#abbrevs][Abbrevs]]
    - [[#company][Company]]
    - [[#deft][Deft]]
    - [[#delete-trailing-whitespace-before-saving][delete-trailing-whitespace before saving]]
    - [[#hippie-expand][Hippie-expand]]
    - [[#markdown-mode][Markdown mode]]
    - [[#nov][Nov]]
    - [[#olivetti-mode][Olivetti mode]]
    - [[#orgmode][Orgmode]]
    - [[#todo-txt][Todo-txt]]
- [[#programming][Programming]]
    - [[#js2-mode][JS2 Mode]]
    - [[#less-css][LESS-CSS]]
    - [[#magit][Magit]]
    - [[#php-mode][PHP Mode]]
    - [[#plantuml][Plantuml]]
    - [[#rainbow-delimiters-mode][Rainbow delimiters mode]]
    - [[#web-mode][Web Mode]]
- [[#some-useful-functions-and-advice][Some useful functions and advice]]
    - [[#advices-for-kill-ring-save-and-kill-region][Advices for =kill-ring-save= and =kill-region=]]
    - [[#use-ido-to-open-recent-files][Use Ido to open recent files]]
    - [[#dont-ask-if-a-buffer-visits-a-running-process-during-killing-emacs-remq-removes-the-relevant-function][Don't ask if a buffer visits a running process during killing emacs. =remq= removes the relevant function]]
    - [[#insert-date][Insert date]]
    - [[#unsplit-line][Unsplit-line]]
    - [[#toggle-between-horizontal-and-vertical-window-split][Toggle between horizontal and vertical window split]]

* Introduction
  :PROPERTIES:
  :CUSTOM_ID: introduction
  :END:
  This is an attempt to migrate my .emacs file into a literate programming org
  version. The main reason is that I hope for better folding and organisation.

  The org-file sets the necessary export options for a nice but not chatty html export.

  Infos on the different packages and settings are in =LOGBOOK= drawers within each
  entry. Reminder: new ones are added via =C-c C-z=.

  The startup is divided into 4 files:
  - =init.el= which starts the org-babel magic
  - =emacs.org= this file which contains the most part
  - =local.el= which contains local or sensitive details
  - =custom.el= which contains everything from M-x customize

  The =init.el= file is where everything begins. It is loaded automatically by Emacs on
  startup, It prepares the repositories I use and the package system to load all packages
  the further startup depends on. finally it set ups the highly useful =no-littering=
  package.

 I aim to use =use-package= as much as possible because I like the clean code and the fast
startup. Some files I use are not available on MELPA. Those are in a sub-directory of my
user directory creatively called “lisp”.

I borrowed a lot from other people’s files, but only recently started no note where things
come from.
* Basics
*** Load the local file
    This file contains data that is eithersensitive so I don't want to share it and also
    everything system-dependent. Check the existence of such a file before loading so as
    not to cause errors.
#+BEGIN_SRC emacs-lisp
(let
((local-file (expand-file-name "local.el" user-emacs-directory)))
(when (file-exists-p local-file)
(load local-file 'noerror)))
#+END_SRC
*** Move customizations into their own file
    Customizations go to a dedicated file. Check the existence of such a file before loading so as
    not to cause errors on a vanilla emacs installation.
   #+begin_src emacs-lisp
    (let
      ((customization-file (expand-file-name "custom.el" user-emacs-directory)))
    (when (file-exists-p customization-file)
      (setq custom-file customization-file)
      (load custom-file 'noerror)))
   #+end_src
*** Set the default font and frame config
    :LOGBOOK:
    - Note taken on [2018-08-21 Di 08:50] \\
      default fontset added
    - Note taken on [2018-04-29 So 20:22]
      Fira Code ligatures don't seem to work
    - Note taken on [2018-04-23 Mo 11:55]
      Fira Code added
    :END:
    I like to see the full path of the buffer and no right fringe. The default fontset
    settings shall ensure that all unicode can be displayed. It's mainly there for the eye
 candy later. Finally inhibiting font cache compacting /should/ improve performance on
    Windows.
    #+begin_src emacs-lisp
      (setq default-frame-alist
            '(
              (fringe-mode (quote (1 . 1)) nil (fringe))
              (fringes-outside-margins nil t)
              (right-fringe . 0)
              (left-fringe)
              (left-fringe-width nil)
              (frame-resize-pixelwise t)
              (border-color . "black")
              (menu-bar-lines . 1)))

      (setq-default frame-title-format
                    (list '((buffer-file-name " %f"
                                              (dired-directory
                                               dired-directory
                                               (revert-buffer-function " %b"
                                                                       ("%b - Dir:  " default-directory)))))))
      (set-fontset-font "fontset-default" nil
                        (font-spec :size 20 :name "Symbola"))

      (cond ((eq system-type 'windows-nt)
             (setq inhibit-compacting-font-caches t)))
    #+end_src
*** Maximize by default
    #+begin_src emacs-lisp
    (add-hook 'window-setup-hook 'toggle-frame-maximized t)
    #+end_src
*** Garbage-collect on focus-out, Emacs /should/ feel snappier.
    :LOGBOOK:
    - Note taken on [2018-04-15 So 12:49] \\
      From Manish Parashar
    :END:
    #+begin_src emacs-lisp
    (add-hook 'focus-out-hook #'garbage-collect)
    #+end_src
*** Set coding system
    I use utf8-encoding everywhere
    #+begin_src emacs-lisp
    (prefer-coding-system       'utf-8)
    (set-default-coding-systems 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (setq default-buffer-file-coding-system 'utf-8)
    #+end_src
    Specify font for all unicode characters
    #+BEGIN_SRC emacs-lisp
      (when (member "Symbola" (font-family-list))
        (set-fontset-font t 'unicode "Symbola" nil 'prepend))
    #+END_SRC
*** Theme
    :LOGBOOK:
    - Note taken on [2018-05-09 Mi 07:57] \\
      Switch to =use-package=
    - Note taken on [2018-04-23 Mo 15:51] \\
      Change to aurora theme
    - Note taken on [2018-04-15 So 12:49] \\
      From Manish Parashar
    :END:
    I switch themes regularly. Unused ones can simple be marked as disabled.

    =solarized-dark= with some customization:
    - make the modeline high contrast
    - make the fringe stand out from the background
    - use more italic
    #+begin_src emacs-lisp
      (use-package solarized-theme
        :demand t
        :disabled
        :config
        (set-face-attribute 'font-lock-comment-face nil :italic t)
        (set-face-attribute 'font-lock-doc-face nil :italic t)
        (setq solarized-high-contrast-mode-line nil
              solarized-distinct-fringe-background t
              solarized-use-more-italic t)
        (load-theme 'solarized-dark t))
    #+end_src

    =leuven= is nice for Org-Mode
    #+BEGIN_SRC emacs-lisp
          (use-package leuven-theme
            :demand t
            :disabled
            :config
            (setq leuven-scale-outline-headlines nil
                  leuven-scale-org-agenda-structure nil)
            (load-theme 'leuven t)
            )
    #+END_SRC

    =poet= is also nice but required changing the faces for =org-column= and =org-column-header= to be useful
    #+BEGIN_SRC emacs-lisp
      (use-package poet-theme
        :demand t
        :disabled
        :config
            (set-face-attribute 'default nil :family "monofur" :height 110)
            (set-face-attribute 'fixed-pitch nil :family "monofur")
            (set-face-attribute 'variable-pitch nil :family "Baskerville Old Face")
            (load-theme 'poet t))
    #+END_SRC

    =doom-nova= is my newest favorite but has issues with =org-bullets=. These have been
    resolved due to proper fontset settings.
    #+BEGIN_SRC emacs-lisp
      (use-package doom
        :demand t
        :disabled
        :config
        (load-theme 'doom-nova t)
        ;(doom-themes-org-config)
        (doom-themes-visual-bell-config))
    #+END_SRC
    Let's try =material= for a while
    #+begin_src emacs-lisp
      (use-package material-theme
        :demand t
        :config
        (load-theme 'material t))
    #+end_src


*** Backup
    :LOGBOOK:
    - Note taken on [2018-04-29 So 20:40] \\
      Trying ideas from https://www.emacswiki.org/emacs/BackupDirectory
    :END:
    Backups should be more than one and go in a dedicated directory
    #+begin_src emacs-lisp
    (setq
    backup-by-copying t      ; don't clobber symlinks
    delete-old-versions t
    kept-new-versions 6
    kept-old-versions 2
    version-control t)       ; use versioned backups
    #+end_src
* General configuration
*** ACE-Windows
    :LOGBOOK:
    - Note taken on [2018-05-24 Do 21:22] \\
      Von https://www.suenkler.info/notes/emacs-config/
    :END:
    This package allows for easy window switching
    #+BEGIN_SRC emacs-lisp
    (use-package ace-window
    :ensure t
    :init
    (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
    '(aw-leading-char-face
    ((t (:inherit ace-jump-face-foreground :height 3.0)))))))
    #+END_SRC
*** Aliases
    [2013-09-03 Di 23:45] I learned from https://sites.google.com/site/steveyegge2/effective-emacs how to add
    aliases which seems handy. The first entry is just a sample to remind me of the syntax
    #+begin_src emacs-lisp
    (defalias 'qrr 'query-replace-regexp)
    #+end_src
*** Appointments
I start to use the appointment system as well, so I need to activate it. I don't want to
be reminded more then twice before the appointment itself. I also want the diary entries
sorted.
#+BEGIN_SRC emacs-lisp
(appt-activate 1)
(setq appt-message-warning-time 10
appt-display-interval 5)
(add-hook 'diary-list-entries-hook 'diary-sort-entries t)
#+END_SRC
[2018-05-28 Mo 18:04]
*** Auto-revert
      No messages for =auto-revert=
      #+begin_src emacs-lisp
        (use-package autorevert
        :ensure nil
        :config
         (setq auto-revert-verbose nil
               global-auto-revert-mode t
               global-auto-revert-non-file-buffers t))
      #+end_src
*** Auto-save
:LOGBOOK:
- Note taken on [2018-07-19 Do 18:49] \\
  Added the code for =auto-save-file-name-transforms=
:END:
=no-littering= seems not to include this so I'll add it here
#+BEGIN_SRC emacs-lisp
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/data/auto-save/\\1" t)))
#+END_SRC

[2013-05-12 So 16:50] The following code is borrowed from prelude
(http://github.com/bbatsov/prelude) to automatically save files on buffer or
window-switching. It doesn't work reliably and I'll use now the builtin config below.
  (defun martin/auto-save-command ()
    "Save the current buffer on buffer or window-switching."
    (when (and buffer-file-name
               (buffer-modified-p (current-buffer))
               (file-writable-p buffer-file-name))
      (message "Saving %s" buffer-file-name)
      (save-buffer)))

    (defadvice switch-to-buffer (before save-buffer-now activate)
    "Invoke `martin/auto-save-command' before `switch-to-window'."
    (martin/auto-save-command))

    (defadvice other-window (before other-window-now activate)
    "Invoke `martin/auto-save-command' before `other-window'."
    (martin/auto-save-command))

Emacs 26.1 has builtin auto-save. I'll use that now with auto-saving once a minute rather
than the default 5 seconds.
#+BEGIN_SRC emacs-lisp
(setq auto-save-visited-interval 60)
(auto-save-visited-mode 1)
#+END_SRC
*** Calendar
    :LOGBOOK:
    - Note taken on [2018-05-13 So 21:44] \\
      It seems =filter-visible-calendar-holidays= is replaced by =holiday-filter-visible-calendar=
    - Note taken on [2014-10-18 Sa 21:37] \\
      variable names change for holiday: all need to start with 'holiday' now
    :END:
    I prefer German names and local holidays

    #+begin_src emacs-lisp
      (setq calendar-date-style 'european
            calendar-week-start-day 1
            calendar-latitude [48 9 north]
            calendar-longitude [11 34 east]
            calendar-time-display-form
            '(24-hours ":" minutes
                       (if time-zone " (")
                       time-zone
                       (if time-zone ")"))
            calendar-day-name-array ["Sonntag" "Montag" "Dienstag" "Mittwoch"
                                     "Donnerstag" "Freitag" "Samstag"]
            calendar-month-name-array ["Januar" "Februar" "März" "April" "Mai"
                                       "Juni" "Juli" "August" "September"
                                       "Oktober" "November" "Dezember"]
            solar-n-hemi-seasons
            '("Frühlingsanfang" "Sommeranfang" "Herbstanfang" "Winteranfang")
            holiday-general-holidays
            '((holiday-fixed 1 1 "Neujahr")
              (holiday-fixed 5 1 "1. Mai")
              (holiday-float 5 0 2 "Muttertag")
              (holiday-fixed 10 3 "Tag der Deutschen Einheit"))
            holiday-christian-holidays
            '(
              (holiday-float 12 0 -4 "1. Advent" 24)
              (holiday-float 12 0 -3 "2. Advent" 24)
              (holiday-float 12 0 -2 "3. Advent" 24)
              (holiday-float 12 0 -1 "4. Advent" 24)
              (holiday-fixed 12 25 "1. Weihnachtstag")
              (holiday-fixed 12 26 "2. Weihnachtstag")
              (holiday-fixed 1 6 "Heilige Drei Könige")
              (holiday-easter-etc -48 "Rosenmontag")
              (holiday-easter-etc -2 "Karfreitag")
              (holiday-easter-etc  0 "Ostersonntag")
              (holiday-easter-etc +1 "Ostermontag")
              (holiday-easter-etc +39 "Christi Himmelfahrt")
              (holiday-easter-etc +49 "Pfingstsonntag")
              (holiday-easter-etc +50 "Pfingstmontag")
              (holiday-easter-etc +60 "Fronleichnam")
              (holiday-fixed 8 15 "Mariä Himmelfahrt")
              (holiday-fixed 11 1 "Allerheiligen")
              (holiday-float 11 3 1 "Buß- und Bettag" 16)
              (holiday-float 11 0 1 "Totensonntag" 20)
              (holiday-fixed 12  8 "Mariä Empfängnis"))
            calendar-holidays
            (append holiday-general-holidays holiday-local-holidays holiday-other-holidays
                    holiday-christian-holidays holiday-solar-holidays))
    #+end_src
*** Custom
:PROPERTIES:
:CREATED:  [2018-12-15 Sa 18:32]
:END:
I prefer setting things in this file rather than = custom.el=.
#+BEGIN_SRC emacs-lisp
  (use-package system-packages
    :custom
    (system-packages-noconfirm t))

  (use-package emacs
    :ensure nil
    :custom
    (ad-redefinition-action 'accept)
    (blink-cursor-mode nil)
    (byte-compile-warnings
     (quote
      (redefine callargs free-vars unresolved obsolete noruntime interactive-only)))
    (column-number-mode t)(compilation-message-face (quote default))
    (confirm-nonexistent-file-or-buffer nil)
    (debug-on-quit nil)
    (delete-by-moving-to-trash t)
    (delete-selection-mode t)
    (display-line-numbers-type nil)
    (echo-keystrokes 0.5)
    (electric-pair-mode t)
    (fast-but-imprecise-scrolling t)
    (fill-column 90)
    (global-font-lock-mode t nil (font-lock))
    (indent-region-mode t)
    (indent-tabs-mode nil "Spaces!")
    (indicate-empty-lines t)
    (inhibit-startup-screen t "Don't show splash screen")
    (initial-buffer-choice t)
    (initial-scratch-message nil)
    (kill-whole-line t)
    (line-spacing 0.2)
    (linum-format " %6d ")
    (mouse-drag-copy-region t)
    (require-final-newline t)
    (save-interprogram-paste-before-kill t)
    (sentence-end-double-space nil)
    (show-paren-mode t)
    (size-indication-mode t)
    (special-display-buffer-names (quote ("*Completions*")))
    (tab-width 2)
    (use-dialog-box nil "Disable dialog boxes")
    (visible-bell t))

  (use-package custom
    :ensure nil
    :custom
    (custom-safe-themes t "Treat all themes as safe"))
#+END_SRC
*** Dashboard
    :LOGBOOK:
    - Note taken on [2018-05-19 Sa 18:22] \\
      Nice idea but not really useful.
    :END:
    A nice dashboard when Emacs is started.
    #+begin_src emacs-lisp
            (use-package dashboard
            :config
            (dashboard-setup-startup-hook)
            (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))
                  dashboard-startup-banner 'official
                  dashboard-banner-logo-title (message "Emacs ready in %s with %d garbage collections."
                  (format "%.2f seconds"
                  (float-time
                  (time-subtract after-init-time before-init-time)))
                  gcs-done)
                  dashboard-items '((recents  . 10)
                              (bookmarks . 5)
                              (agenda . 5)))
            :demand t)
    #+end_src
*** date2name
    :LOGBOOK:
- Note taken on [2018-07-20 Fr 08:48] \\
  From Karl Voit's .emacs
:END:

    https://github.com/DerBeutlin/date2name.el provides =date2name-dired-add-date-to-name()=
    which is an Elisp-native re-implementation of [[https://github.com/novoid/date2name][date2name]]:

#+BEGIN_SRC emacs-lisp
  (use-package date2name
    :load-path "lisp/date2name.el/"
    :demand t)
    #+END_SRC
*** Dimish
    :LOGBOOK:
    - Note taken on [2018-05-13 So 21:09] \\
    Added from http://www.star.bris.ac.uk/bjm/emacs.html
    :END:
    Diminish minor modes from mode line to save space
    #+begin_src emacs-lisp
      (use-package diminish
      :ensure t
      :demand t
      :diminish abbrev-mode
      :diminish auto-fill-function
      :diminish eldoc-mode
      :diminish counsel-mode
      :diminish visual-line-mode
      :diminish undo-tree-mode
      :diminish company-mode)
    #+end_src
*** Dired
:LOGBOOK:
- Note taken on [2018-10-28 So 12:13] \\
  There is a new way to hide details in =dired=. Seems to be enough instead of dired-details
  so I removed it. Also added some other goodies.
:END:
Config =dired= with =use-package=
#+BEGIN_SRC emacs-lisp
  (use-package dired
    :ensure nil
    :custom (dired-dwim-target t "guess a target directory")
    :hook
    (dired-mode . dired-hide-details-mode))
#+END_SRC

This provides a sidebar with a dired buffer for the current directory
#+BEGIN_SRC emacs-lisp
  (use-package dired-toggle
    :defer t)
#+END_SRC

Usually I'm not interested in dotfiles
#+BEGIN_SRC emacs-lisp
  (use-package dired-hide-dotfiles
    :bind
    (:map dired-mode-map
          ("." . dired-hide-dotfiles-mode))
    :hook
    (dired-mode . dired-hide-dotfiles-mode))
#+END_SRC

And I like more colors
#+BEGIN_SRC emacs-lisp
  (use-package diredfl
    :hook
    (dired-mode . diredfl-mode))
#+END_SRC

From http://pragmaticemacs.com/emacs/tree-style-directory-views-in-dired-with-dired-subtree/

The dired-subtree package (part of the magnificent dired hacks) improves on this by allowing you to expand subdirectories in place, like a tree structure. To install the package, use the following code:
#+BEGIN_SRC emacs-lisp
  (use-package dired-subtree
    :config
    (bind-keys :map dired-mode-map
               ("i" . dired-subtree-insert)
               (";" . dired-subtree-remove)))
#+END_SRC

This sets up the keybinds so that in dired, hitting i on a subdirectory expands it in
place with an indented listing. You can expand sub-subdirectories in the same way, and so
on. Hitting ; inside an expanded subdirectory collapses it.

I like icons in th dired buffer from =treemacs=
#+BEGIN_SRC emacs-lisp
(use-package treemacs-icons-dired
  :after treemacs dired
  :ensure t
  :config (treemacs-icons-dired-mode))
#+END_SRC
*** Display
:PROPERTIES:
:CREATED:  [2018-12-15 Sa 18:06]
:END:
Display related settings
#+BEGIN_SRC emacs-lisp
  (setq global-display-line-numbers-mode t
        global-hl-line-sticky-flag t
        global-visual-line-mode t)
#+END_SRC
*** Delete duplicate entries of the history of the minibuffer
:LOGBOOK:
- Note taken on [2018-07-19 Do 18:37] \\
  From Karl Voit's .emacs
:END:
«If the value of this variable is t, that means when adding a new
history element, all previous identical elements are deleted.» from:
http://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-History.html

#+BEGIN_SRC emacs-lisp
(setq history-delete-duplicates t)
#+END_SRC

*** Emacs Server
Useful to reuse the already running instance
#+BEGIN_SRC emacs-lisp
(unless (and (fboundp 'server-running-p)
             (server-running-p))
  (server-start))
#+END_SRC
*** filetags.el
:LOGBOOK:
- Note taken on [2018-07-20 Fr 08:47] \\
  From Karl Voit's .emacs
:END:

https://github.com/DerBeutlin/filetags.el provides =filetags-dired-update-tags()= which is
an Elisp-native re-implementation of [[https://github.com/novoid/filetags/][filetags]]:

It requires =ivy= to work so I used =package-install= to install it from Melpa. Afterwards
it seems to work. At least on ArchLabs it also requires the =s= package so I'll add that.
#+BEGIN_SRC emacs-lisp
(require 's)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package filetags
    :load-path  "lisp/filetags.el/"
    :demand t
    :config
    (setq filetags-load-controlled-vocabulary-from-file t) ;; read CV from .filetags files within same or upper directories
  )
#+END_SRC
*** Golden ratio scrolling
    Improved scrolling in larger files
    #+BEGIN_SRC emacs-lisp
      (use-package golden-ratio-scroll-screen
        :ensure t
        :bind(([remap scroll-down-command] . golden-ratio-scroll-screen-down)
              ([remap scroll-up-command] . golden-ratio-scroll-screen-up)))
    #+END_SRC

*** Helpful
:PROPERTIES:
:CREATED:  [2018-12-17 Mo 10:21]
:END:
Helpful is a useful replacement for the standard help buffer see [[https://github.com/Wilfred/helpful][GitHub - Wilfred/helpful: A better Emacs *help* buffer]]
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :bind (
           ("C-h f" . helpful-callable)
           ("C-h v" . helpful-variable)
           ("C-h k" . helpful-key)))
#+END_SRC
*** Highlight the current line
    :LOGBOOK:
    - Note taken on [2013-07-13 Sa 20:13] \\
      It needs to be =global-hl-line-mode= otherwise it won't work globally
    :END:
    Set a custom face, so we can recognize it from the normal (selection) marking
    #+begin_src emacs-lisp
      (global-hl-line-mode 1)
      (setq hl-line-face 'hl-line)
    #+end_src
*** Ido-mode
    :LOGBOOK:
    - Note taken on [2018-10-01 Mo 21:20] \\
      Disabled I use ivy instead
    - Note taken on [2018-05-18 Fr 21:47] \\
      Added ido-enable-flex-matching t
    - Note taken on [2018-05-08 Tue 20:47] \\
      Prefer use-package to defer loading
    :END:
    Ido mode is very cool for buffer management. This uses =use-package= rather than
    =custom.el=.
    #+begin_src emacs-lisp
      (use-package ido
        :config
        :disabled t
        (setq ido-create-new-buffer (quote always)
              ido-enable-flex-matching t)
        (ido-mode (quote buffers))
        :ensure nil)
    #+end_src
*** Ivy
:PROPERTIES:
:CREATED:  [2018-07-24 Di 21:32]
:END:
Yet another completion tool. From
https://www.reddit.com/r/emacs/comments/910pga/tip_how_to_use_ivy_and_its_utilities_in_your/
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-c C-r" . ivy-resume)
           ("C-x B" . ivy-switch-buffer-other-window))
    :config
    (setq ivy-count-format "(%d/%d) "
          ivy-display-style 'fancy
          ivy-use-virtual-buffers t
          ivy-virtual-abbreviate 'full)
    (ivy-mode))

  (use-package counsel
    :after ivy
    :ensure t
    :config (counsel-mode)
    :bind ("\C-x\C-r" . counsel-recentf))

  (use-package ivy-rich
    :after ivy
    :config
    (setq ivy-rich-path-style 'abbrev)
    (ivy-rich-mode 1))

  (use-package swiper
    :after ivy
    :ensure t
    :bind (("C-s" . swiper)
           ("C-r" . swiper)))
#+END_SRC
*** Keyboard settings
    :LOGBOOK:
    - Note taken on [2018-09-17 Mo 10:33] \\
      C-c C-r is now bound within org so the somment-region keybinding doesn't work anymore
    - Note taken on [2016-12-11 So 11:56] \\
      I don't use =org-trello= anymore so back to =occur= binding.
    - Note taken on [2013-08-18 So 18:30] \\
      the key binding for =occur= is removed because it's also used by =org-trello=
    :END:
    This is a list of special key settings for different functions I use a lot:
    - have RET indent according to mode
      #+begin_src emacs-lisp
      (global-set-key (kbd "RET") 'newline-and-indent)
      #+end_src
    - make it easy to call =occur=
      #+begin_src emacs-lisp
      (global-set-key "\C-co" 'occur)
      #+end_src
    - I found =ibuffer= on
      http://ergoemacs.org/emacs/emacs_buffer_management.html.
      This seems better than =buffer-menu=
      #+begin_src emacs-lisp
        (defalias 'list-buffers 'ibuffer)
      #+end_src
    - I never use =set-fill-column= but want to find a file
      #+begin_src emacs-lisp
        (define-key ctl-x-map "f" 'find-file)
      #+end_src
    - make it easy to comment a region (C-u C-c C-r uncomments the region)
      #+begin_src emacs-lisp
      ;  (global-set-key "\C-c\C-r" 'comment-region)
      #+end_src
    - make it easy to go to a line
      #+begin_src emacs-lisp
        (global-set-key "\M-g" 'goto-line)
      #+end_src
    - easily revert a buffer
      #+begin_src emacs-lisp
      (global-set-key "\C-c\C-v" '(lambda () (interactive) (revert-buffer nil t)))
      #+end_src
    - Use "y or n" answers instead of full words "yes or no"
      #+begin_src emacs-lisp
      (fset 'yes-or-no-p 'y-or-n-p)
      #+end_src
*** Menu bar
:PROPERTIES:
:CREATED:  [2018-10-28 So 11:47]
:END:
:LOGBOOK:
- Note taken on [2018-10-28 So 11:49] \\
  Cool idea from [[https://github.com/a13/emacs.d][GitHub - a13/emacs.d]]
:END:
Most of the time I don't  need the menu bar but it's useful to quickly get to it
#+BEGIN_SRC emacs-lisp
  (use-package menu-bar
    :ensure nil
    :config
    (menu-bar-mode -1)
    :bind
    ([S-f10] . menu-bar-mode))
#+END_SRC

*** Minimal
Replace the mode-line by a single small line. Useful for distraction-free writing
#+BEGIN_SRC emacs-lisp
  (use-package minimal
    :load-path "lisp/minimal"
    :demand t)
#+END_SRC
*** Minions
:PROPERTIES:
:CREATED:  [2019-02-10 So 17:35]
:END:
Another package to reduce clutter in the mode-line from [[https://github.com/tarsius/minions][GitHub - tarsius/minions: A minor-mode menu for the mode line]]
 #+begin_src emacs-lisp
   (use-package minions
     :demand t
     :config (minions-mode t))
 #+end_src
*** mode-icons - Show icons instead of mode names

https://github.com/ryuslash/mode-icons

via: https://www.reddit.com/r/emacs/comments/5fjri7/how_to_use_git_logo_in_modeline_instead_of/

This enhances the style of Emacs IMHO.

#+BEGIN_SRC emacs-lisp
(use-package mode-icons
  :demand t
  :config
  (mode-icons-mode)
)
#+END_SRC
*** Modernized Package Menu
:PROPERTIES:
:CREATED:  [2018-10-28 So 11:38]
:END:
Improves the package menu via [[https://github.com/a13/emacs.d][GitHub - a13/emacs.d]]

#+BEGIN_SRC emacs-lisp
  (use-package paradox
    :defer 1
    :config
    (paradox-enable))
#+END_SRC
*** Moody
:PROPERTIES:
:CREATED:  [2019-02-10 So 17:48]
:END:
Some eye candy for the modelina from [[https://github.com/tarsius/moody][GitHub - tarsius/moody: Tabs and ribbons for the mode-line]]
#+begin_src emacs-lisp
(use-package moody
  :demand t
  :config
  (setq x-underline-at-descent-line t)
  (moody-replace-mode-line-buffer-identification)
  (moody-replace-vc-mode))
#+end_src
*** msb-Mode
    :LOGBOOK:
    - Note taken on [2018-05-07 Mon 21:59] \\
      Added use-package rather than custom.el
    :END:
    From https://www.gnu.org/software/emacs/manual/html_node/emacs/Buffer-Menus.html: MSB
    global minor mode (“MSB” stands for “mouse select buffer”) provides a different and
    customizable mouse buffer menu which you may prefer. It replaces the mouse-buffer-menu
    commands, normally bound to C-Down-mouse-1 and C-<F10>, with its own commands, and
    also modifies the menu-bar buffer menu.

    #+begin_src emacs-lisp
    (use-package msb
    :config
    (msb-mode 1)
    :ensure nil)
    #+end_src
*** No blinking cursor
    I find a blinking cursor distracting.
    #+begin_src emacs-lisp
    (blink-cursor-mode 0)
    #+end_src
*** No toolbar and no scrollbar
    I don't need the big icons and prefer more screen real estate. See also
    https://sites.google.com/site/steveyegge2/effective-emacs
    #+begin_src emacs-lisp
    (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
    (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
    #+end_src
*** Recentf
    :LOGBOOK:
    - Note taken on [2018-08-09 Do 22:58] \\
      Exclude the no-littering directories
    - Note taken on [2018-05-07 Mon 21:38] \\
      Added to reduce startup time
    :END:
An idea from https://blog.d46.us/advanced-emacs-startup/ to reduce emacs startup time
#+begin_src emacs-lisp
  (use-package recentf
  :config
  (setq recentf-max-saved-items 40
        recentf-max-menu-items 15
        recentf-menu-open-all-flag t
        ;; disable recentf-cleanup on Emacs start, because it can cause
        ;; problems with remote files
        recentf-auto-cleanup 'never)
  (add-to-list 'recentf-exclude  '("/\\.emacs\\.d/elpa/"))
  (add-to-list 'recentf-exclude no-littering-var-directory)
  (add-to-list 'recentf-exclude no-littering-etc-directory)
  (recentf-mode +1))
#+end_src
*** Saveplace
    :LOGBOOK:
    - Note taken on [2018-05-08 Tue 20:59] \\
      Switch to =use-package=
    :END:
    #+begin_src emacs-lisp
      (use-package saveplace
        :config
        (save-place-mode t)
        :ensure nil)
    #+end_src
*** Smooth scrolling
    :LOGBOOK:
    - Note taken on [2013-11-02 Sa 22:07] \\
      Newly added
    :END:
    Emacs's default scrolling behavior, like a lot of the default Emacs experience, is
    pretty idiosyncratic. The following snippet makes for a smoother scrolling behavior
    when using keyboard navigation.

    #+begin_src emacs-lisp
     (setq redisplay-dont-pause t
           scroll-margin 1
           scroll-step 1
           scroll-conservatively 10000
           scroll-preserve-screen-position 1)
   #+end_src
*** Time
:PROPERTIES:
:CREATED:  [2018-12-15 Sa 18:31]
:END:
Settings for the time in the mode line
#+BEGIN_SRC emacs-lisp
  (use-package time
    :defer t
    :ensure nil
    :custom
    (display-time-default-load-average nil)
    (display-time-24hr-format t)
    (display-time-day-and-date t)
    (display-time-interval 30)
    (display-time-string-forms
     (quote
      ((if display-time-day-and-date
           (format "%s %s. %s " dayname day monthname)
         "")
       (format "%s:%s%s"
               (if display-time-24hr-format 24-hours 12-hours)
               minutes
               (if display-time-24hr-format "" am-pm)))))
    :config
    (display-time-mode t))
#+END_SRC
*** Uniquify
    Emacs's standard method for making buffer names unique adds <2>, <3>, etc. to the end
    of (all but one of) the buffers. =uniquify= replaces that behavior, for buffers
    visiting files and dired buffers, with a uniquification that adds parts of the file
    name until the buffer names are unique.
    #+begin_src emacs-lisp
      (use-package uniquify
        :config
        (setq uniquify-buffer-name-style 'forward)
        :ensure nil)
    #+end_src
*** Visualise whitespace
    :LOGBOOK:
    - Note taken on [2018-05-13 So 21:09] \\
    Added from http://www.star.bris.ac.uk/bjm/emacs.html
    :END:
    This can be useful to find trailing whitespaces. I won't need it often.
    #+begin_src emacs-lisp
    (use-package whitespace
    :diminish whitespace-mode)
    #+end_src
*** Which-key
:PROPERTIES:
:CREATED:  [2018-12-09 So 22:41]
:END:
=which-key= provides visual hints for keybindings
#+BEGIN_SRC emacs-lisp
(use-package which-key)
(which-key-mode)
#+END_SRC
* Editing related items
*** Abbrevs
    I use abbrevs mainly to correct common spelling errors
    #+begin_src emacs-lisp
    (setq-default abbrev-mode t)     ;; enable abbreviations
    (setq save-abbrevs 'silently)    ;; save abbreviations upon exiting emacs
    (if (file-exists-p abbrev-file-name)
    (quietly-read-abbrev-file))  ;; reads the abbreviations file on startup
    #+end_src
*** Comment lines
    :LOGBOOK:
    - Note taken on [2018-05-26 Sa 19:17] \\
      From http://www.star.bris.ac.uk/bjm/emacs.html
    :END:
    Comment lines easily
    #+BEGIN_SRC emacs-lisp
    (use-package comment-dwim-2
    :bind (("M-;" . comment-dwim-2)))
    #+END_SRC
*** Company
    :LOGBOOK:
    - Note taken on [2015-12-18 Fr 09:18] \\
      Added as a try
    :END:
    Let's try auto-complete in emacs.
    Accorcing to the docs this should provide company globally and load company mode html
    backend
    #+begin_src emacs-lisp
    (use-package company-web
    :diminish t)
    (add-hook 'after-init-hook 'global-company-mode)
    #+end_src

    Some more config coming from
    https://www.reddit.com/r/emacs/comments/8z4jcs/tip_how_to_integrate_company_as_completion/
    #+BEGIN_SRC emacs-lisp
      (use-package company
        :diminish
        :config
        (setq company-begin-commands '(self-insert-command)
              company-minimum-prefix-length 2
              company-show-numbers t
              company-tooltip-align-annotations 't)
        (global-company-mode t))
    #+END_SRC
    including nice GUI
    #+BEGIN_SRC emacs-lisp
      (use-package company-box
        :after company
        :diminish
        :hook (company-mode . company-box-mode))
    #+END_SRC
    Some additional settings mentioned on https://github.com/osv/company-web
    #+begin_src emacs-lisp
    (setq company-tooltip-limit 20)                      ; bigger popup window
    (setq company-tooltip-align-annotations 't)          ; align annotations to the right tooltip border
    (setq company-idle-delay .3)                         ; decrease delay before autocompletion popup shows
    (setq company-begin-commands '(self-insert-command)) ; start autocompletion only after typing
    #+end_src
*** Deft
    :LOGBOOK:
    - Note taken on [2018-04-29 So 21:08] \\
      Changed deft-use-filename-as-title to nil which seems to use the filter string
      Removed the global-key because C-c d to insert date is more convenient
    - Note taken on [2018-02-26 Mon 22:35] \\
      Added for a test
    :END:
    Deft is an Emacs mode for quickly browsing, filtering, and editing directories of
    plain text notes, inspired by Notational Velocity.

    I want readable filenames =deft-use-filename-as-title= is =nil= but
    =deft-use-filter-string-for-filename= is non-nil: In this case the title shown is
    parsed from the first line of the file while also generating readable filenames for
    new files based on the filter string. That also gets added as a title into the file.
    #+begin_src emacs-lisp
      (use-package deft
        :init
        (setq deft-directory (concat cloud-dir "Notes"))
        :config
        (setq deft-default-extension "md"
        deft-use-filename-as-title nil
        deft-use-filter-string-for-filename t
        deft-auto-save-interval 0
        deft-org-mode-title-prefix t
        deft-file-naming-rules
          '((noslash . "-")
            (nospace . "-")
            (case-fn . capitalize)))
        :bind ("C-x C-d" . deft-find-file))
    #+end_src
*** delete-trailing-whitespace before saving
:LOGBOOK:
- Note taken on [2018-07-19 Do 18:39] \\
  From Karl Voit's .emacs
:END:

I don't want to see trailing whitespace. Adding this as a general =before-save-hook= does the job
automatically upon save:

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
*** Hippie-expand
    :LOGBOOK:
    - Note taken on [2018-05-13 So 21:18] \\
      Added from http://www.star.bris.ac.uk/bjm/emacs.html
    :END:
    This is a useful extension to text expansion
    #+begin_src emacs-lisp
      (global-set-key (kbd "M-/") 'hippie-expand)
      (setq hippie-expand-try-functions-list
            '(try-expand-dabbrev
              try-expand-dabbrev-all-buffers
              try-expand-dabbrev-from-kill
              try-complete-file-name-partially
              try-complete-file-name
              try-expand-all-abbrevs
              try-expand-list
              try-expand-line
              try-complete-lisp-symbol-partially
              try-complete-lisp-symbol)
            hippie-expand-dabbrev-as-symbol t
            hippie-expand-dabbrev-skip-space nil)
    #+end_src
*** Markdown mode
:PROPERTIES:
:CREATED:  [2018-07-31 Di 22:38]
:END:
There are a bunch of markdown files I use regularly. So a fitting mode is appropriate.
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "pandoc --from markdown -t html5 --standalone"))
#+END_SRC
*** Nov
:PROPERTIES:
:CREATED:  [2019-01-01 Di 18:27]
:END:
=nov= is a mode to read epub files in Emacs. It looks nice so I'll try that.
 #+begin_src emacs-lisp
   (use-package nov
     :config
     (setq nov-text-width 100))

   (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
 #+end_src
*** Olivetti mode
:PROPERTIES:
:CREATED:  [2018-10-01 Mo 20:45]
:END:
Olivetti provides a nice distraction-free environment.
#+BEGIN_SRC emacs-lisp
  (use-package olivetti
    :custom
    (olivetti-body-width 0.8)
    (olivetti-hide-mode-line t)
    )
#+END_SRC
*** Orgmode
    :LOGBOOK:
    - Note taken on [2018-07-10 Di 07:54] \\
      Added org-expiry to get a CREATED property for new headings
    - Note taken on [2018-05-03 Do 06:59] \\
      Going back to org-mode for tasks
    - Note taken on [2015-04-12 So 16:18] \\
      Mobile-org removed again
    - Note taken on [2014-11-13 Do 07:57] \\
      Another try for MobileOrg
    - Note taken on [2013-08-18 So 18:32] \\
      Notes can be added in the LOGBOOK drawer with C-c C-z
    :END:
      Finally ;-)-
***** General settings
:LOGBOOK:
- Note taken on [2018-12-27 Do 13:56] \\
  Saving into a datetree with sufficient number of * produces a proper datetree. I added also the cookie counter to get an overview how many taks I closed on a given day per file.
- Note taken on [2018-05-04 Fr 10:39] \\
  Ideas from Bernt Hansen http://doc.norang.ca/org-mode.html
:END:
- Where my Org files are stored
  #+BEGIN_SRC emacs-lisp
    (setq org-directory (concat cloud-dir "org"))
  #+END_SRC
- Archiving into a datetree
  #+BEGIN_SRC emacs-lisp
    (setq  org-archive-location "archive.org::datetree/*** %S [/]")
  #+END_SRC
- Deadlines and due dates are a fact or life
  By default I want to see deadlines in the agenda 30 days before the due date. The
  following setting accomplishes this:
  #+begin_src emacs-lisp
  (setq org-deadline-warning-days 30)
  #+end_src
- Speed commands
  #+BEGIN_SRC emacs-lisp
      (setq  org-fast-tag-selection-single-key 'expert
             org-special-ctrl-a/e t
             org-special-ctrl-k t
             org-use-speed-commands t)
  #+END_SRC
- Logging and habits
  I want to log state changes and also use the =org-habit= module
  #+BEGIN_SRC emacs-lisp
     (setq  org-habit-graph-column 60
            org-log-done 'time
            org-log-into-drawer t
            org-log-redeadline 'time
            org-log-reschedule 'time)
  #+END_SRC
- I like indented mode
  #+BEGIN_SRC emacs-lisp
    (setq org-startup-indented t
          org-src-tab-acts-natively t)
  #+END_SRC
- Refiling
  #+BEGIN_SRC emacs-lisp
    (setq org-outline-path-complete-in-steps nil
          org-refile-allow-creating-parent-nodes 'confirm
          org-refile-targets '((org-agenda-files :maxlevel . 5) (nil :maxlevel . 5))
          org-refile-use-outline-path 'file)
  #+END_SRC
- I want to be reminded of agenda items
  #+BEGIN_SRC emacs-lisp
    (org-agenda-to-appt)
  #+END_SRC
- Quickly insert a block of elisp:
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'org-structure-template-alist
                 '("el" . "src emacs-lisp"))
  #+END_SRC
- Use MobileOrg with encryption
  #+BEGIN_SRC emacs-lisp
  (setq org-mobile-use-encryption t)
  #+END_SRC
- I like =visual-pitch-mode and =visual-line-mode= for org files
  #+BEGIN_SRC emacs-lisp
    (add-hook 'org-mode-hook
              (lambda ()
                (variable-pitch-mode 1)
                visual-line-mode))
  #+END_SRC
- Update cookies when killing lines (from [[http://whattheemacsd.com/setup-org.el-01.html][What the .emacs.d!?]])
#+BEGIN_SRC emacs-lisp
(defun myorg-update-parent-cookie ()
  (when (equal major-mode 'org-mode)
    (save-excursion
      (ignore-errors
        (org-back-to-heading)
        (org-update-parent-todo-statistics)))))

(defadvice org-kill-line (after fix-cookies activate)
  (myorg-update-parent-cookie))

(defadvice kill-whole-line (after fix-cookies activate)
  (myorg-update-parent-cookie))
#+END_SRC
- Always load these modules
#+BEGIN_SRC emacs-lisp
(setq org-modules '(org-habit org-info org-expiry))
#+END_SRC
***** Add a created property to new entries
      :PROPERTIES:
      :CREATED:  [2018-07-09 Mo 23:26]
      :END:
      It's a combination of =org-expiry= and a capture hook. =org-expiry= is loaded
      through =org-modules=.
      #+BEGIN_SRC emacs-lisp
      (require 'org-expiry)
      (org-expiry-insinuate)
      (setq org-expiry-inactive-timestamps t)
      (add-hook 'org-capture-before-finalize-hook
      #'(lambda()
      (save-excursion
      (org-back-to-heading)
      (org-expiry-insert-created))))
      #+END_SRC
***** The usual keybindings
#+begin_src emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-switchb)
#+end_src
***** Adding =imenu= support
:LOGBOOK:
- Note taken on [2018-07-18 Mi 07:32] \\
  Added setting for =org-imenu-depth=.
- Note taken on [2013-09-04 Mi 12:06] \\
  Found in the manual
:END:
#+begin_src emacs-lisp
(add-hook 'org-mode-hook
(lambda () (imenu-add-to-menubar "Imenu")))
#+end_src
By default only 2 headings deep are shown which isn't enough when using odd levels only.
#+BEGIN_SRC emacs-lisp
(setq org-imenu-depth 5)
#+END_SRC
***** Agenda settings
      :LOGBOOK:
      - Note taken on [2015-11-08 So 18:54] \\
        LAPTOP as a todo removed because I don't use it any longer
      :END:
      I use a GTD type agenda with all todo keywords and a project list
      The settings for =org-todo-keywords=, =org-stuck-projects= and
      =org-agenda-custom-commands=  are in =local.el= since they are both sensitive and
      system-dependent.
   #+begin_src emacs-lisp
     (setq org-agenda-files (concat org-directory "/agenda.txt")
           org-agenda-start-on-weekday nil
           org-fast-todo-selection t
           org-fast-tag-selection-include-todo nil
           org-agenda-include-diary t
           org-agenda-insert-diary-extract-time t
           org-agenda-prefix-format
           '((agenda . "  %-12c%?-12t% s")
             (timeline . "  % s")
             (todo . "  %-12:c")
             (tags . "  %-12:c")
             (search . "  %-12:c"))
           org-agenda-remove-tags t
           org-agenda-show-inherited-tags nil
           org-agenda-time-grid
           (quote
            ((daily today remove-match)
             (800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800)
             "......" "----------------")))

   #+end_src
***** Capture templates
      :LOGBOOK:
      - Note taken on [2018-09-27 Do 11:38] \\
        Separate the capture templates
      - Note taken on [2018-05-20 So 21:47] \\
        I moved several settings form =custom.el= here to use the variables from
        =local.el=
      :END:
      #+BEGIN_SRC emacs-lisp
        (setq  org-capture-templates
               (quote
                (("m" "Meeting" entry
                  (file+olp+datetree "Journal.org")
                  "* %U - %^{Meeting}  :TIME:
%[~/.emacs.d/config/org/meeting.txt]" :clock-in t :clock-keep t)
                 ("j" "Journal" entry
                  (file+olp+datetree "Journal.org")
                  "* %U %?
                         %i")
                 ("i" "Ideen" entry (file "Inbox.org")
                  "* %^{Title}
                         %i")
                 ("t" "Neue Tasks" entry
                  (file+headline "tasks.org" "Inbox:")
                  "* TODO %^{Task}
                         %i" :immediate-finish t)
                 ("l" "Log Time" entry
                  (file+olp+datetree "Journal.org")
                  "* %U - %^{Activity}  :TIME:" :immediate-finish t :clock-in t :clock-keep t)
                 ("o" "Outcomes for today" entry
                  (file+olp+datetree "Journal.org")
                  "* %U 3 Outcomes for today [%]  :ZIELE:
%[~/.emacs.d/config/org/.woche.txt]")
                 ("w" "Outcomes for the week" entry
                  (file+olp+datetree "Journal.org")
                  "* %U 3 Outcomes for the week [%]   :ZIELE:
%[~/.emacs.d/config/org/.woche.txt]")
                 ("r" "Weekly Review" entry
                  (file+olp+datetree "review.org")
                  "* Weekly Review  :PERSOENLICH:
%[~/.emacs.d/config/org/.weeklyreview.txt]")
                 ("c" "Cliplink capture task" entry (file "Inbox.org")
                  "* %(org-cliplink-capture)" :empty-lines 1)
                 ("d" "Daily Review" entry
                  (file+olp+datetree "Journal.org")
                  "* %U Daily Review
%[~/.emacs.d/config/org/.daily_review.txt]")
                 ("p" "Project Planning" entry
                  (file+headline "planning.org" "Projekte")
                  "* %^{Beschreibung}
%[~/.emacs.d/config/org/.planning.txt]"))))
      #+END_SRC
***** Org-Babel
:LOGBOOK:
      - Note taken on [2018-07-19 Do 18:32] \\
        Set directory for plantuml fitting to no-littering
      - Note taken on [2018-05-14 Mo 21:37] \\
        Added plantuml specific parts
      - Note taken on [2015-09-24 Do 20:13] \\
        no longer works so I comment it out
      - Note taken on [2013-11-02 Sa 22:08] \\
        Added
      :END:
- =ob-plantuml= allows to provide Plantuml diagrams within Orgmode documents. To
  have only the diagram in the output you need to set =:exports results= in the src
  block.
  #+begin_src emacs-lisp
    (setq org-plantuml-jar-path (concat (expand-file-name no-littering-etc-directory) "org/plantuml.jar"))
    (add-to-list
     'org-src-lang-modes '("plantuml" . plantuml))
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (plantuml . t)))
   #+end_src
- I don't want to be asked about code evaluation
  #+begin_src emacs-lisp
    (setq org-confirm-babel-evaluate nil)
  #+end_src
- Use syntax highlighting ("fontification") in org-mode source blocks
  #+begin_src emacs-lisp
    (setq org-src-fontify-natively 't)
  #+end_src
- Automatically refresh inline images
  From http://emacs.stackexchange.com/questions/3302/live-refresh-of-inline-images-with-org-display-inline-images
  #+BEGIN_SRC emacs-lisp
    (defun shk-fix-inline-images ()
    (when org-inline-image-overlays
    (org-redisplay-inline-images)))

      (add-hook 'org-babel-after-execute-hook 'shk-fix-inline-images)
      #+END_SRC
***** Org-Export
:LOGBOOK:
- Note taken on [2019-01-01 Di 17:46] \\
  Org 9.2 changes the structure-template semantics. So Iremevied the ox-hugo template
- Note taken on [2018-09-27 Do 11:34] \\
  Move seetings from =custom.el= here
:END:
- Some general settings. I don't need tags or todo keyword in the export and also usually
  no toc. Only headings with certain tags shall be exorted
#+BEGIN_SRC emacs-lisp
  (setq org-export-exclude-tags '("NA")
        org-export-select-tags (quote ("PROJEKT" "TOPIC" "EXPORT"))
        org-export-with-tags nil
        org-export-with-toc nil
        org-export-with-todo-keywords nil)
#+END_SRC
- I use =pandoc= for export to various formats
  #+begin_src emacs-lisp
    (setq org-pandoc-menu-entry
          '(
            (?x "to docx and open." org-pandoc-export-to-docx-and-open)
            (?X "to docx." org-pandoc-export-to-docx)
            (?o "to odt and open." org-pandoc-export-to-odt-and-open)
            (?O "to odt." org-pandoc-export-to-odt)
            (?8 "to opendocument and open." org-pandoc-export-to-opendocument-and-open)
            (?8 "to opendocument." org-pandoc-export-to-opendocument)
            (?k "to markdown and open." org-pandoc-export-to-markdown-and-open)
            (?K "as markdown." org-pandoc-export-as-markdown)
            (?m "to markdown_mmd and open." org-pandoc-export-to-markdown_mmd-and-open)
            (?M "as markdown_mmd." org-pandoc-export-as-markdown_mmd)
            (?s "to markdown_strict & open" org-pandoc-export-to-markdown_strict-and-open)
            (?S "as markdown_strict." org-pandoc-export-as-markdown_strict)
            (?p "to plain and open." org-pandoc-export-to-plain-and-open)
            (?P "as plain." org-pandoc-export-as-plain)
            (?h "to html5 and open." org-pandoc-export-to-html5-and-open)
            (?H "as html5." org-pandoc-export-as-html5)))
    (use-package ox-pandoc
      :after org
      :config (add-to-list 'org-pandoc-options '(toc . t))
      :demand t)
  #+end_src
  - I use ascii export a lot but want wider text
    #+begin_src emacs-lisp
    (setq org-ascii-text-width 150)
    #+end_src
  - I want to blog using =hugo=
#+BEGIN_SRC emacs-lisp
  (use-package ox-hugo
    :demand t
    :after ox
    :custom
    (safe-local-variable-values (quote ((org-hugo-auto-export-on-save . t)))))
#+END_SRC
***** Org-cliplink
      Easily insert links form the clipboard in org-mode files
      #+BEGIN_SRC emacs-lisp
      (use-package org-cliplink
      :bind ("C-c p" . org-cliplink))
      #+END_SRC
***** Org-Clock
      :PROPERTIES:
:CREATED:  [2018-08-24 Fr 13:43]
:END:
      I started again to use clocking in Org-mode. Here are the related settings
      #+BEGIN_SRC emacs-lisp
        (setq org-clock-persist t
              org-clock-in-resume t
              org-clock-report-include-clocking-task t
              org-clock-mode-line-total 'current
              org-agenda-clockreport-parameter-plist '(:link t :maxlevel 3))
        (org-clock-persistence-insinuate)
      #+END_SRC
***** Additional link type for TAGS
      :LOGBOOK:
      - Note taken on [2018-05-19 Sa 18:55] \\
        From http://endlessparentheses.com/use-org-mode-links-for-absolutely-anything.html
      :END:
      The following code defines links which search your headlines for specific tags.
      #+BEGIN_SRC emacs-lisp
      (org-add-link-type
      "tag" 'endless/follow-tag-link)

      (defun endless/follow-tag-link (tag)
      "Display a list of TODO headlines with tag TAG.
      With prefix argument, also display headlines without a TODO keyword."
      (org-tags-view (null current-prefix-arg) tag))
      #+END_SRC

      Then, merely write your links as =[[tag:work+phonenumber-boss][Optional Description]\]=
***** Toc-Org
     Table of contents in Org Files
        #+BEGIN_SRC emacs-lisp
        (use-package toc-org
          :ensure t
          :after org
          :hook (org-mode . toc-org-enable))
      #+END_SRC
***** Org Beautify
:PROPERTIES:
:CREATED:  [2018-08-18 Sa 22:00]
:END:
Settings to make org buffers look nicer
- Odd levels, hiding stars and no emphasis markers displayed
  #+BEGIN_SRC emacs-lisp
    (setq org-hide-emphasis-markers t
          org-fontify-done-headline t
          org-hide-leading-stars t
          org-pretty-entities t
          org-odd-levels-only t)
  #+END_SRC
- Automatically change list bullets
  #+begin_src emacs-lisp
    (setq org-list-demote-modify-bullet
          (quote (("+" . "-")
                  ("-" . "+")
                  ("*" . "-")
                  ("1." . "-")
                  ("1)" . "-")
                  ("A)" . "-")
                  ("B)" . "-")
                  ("a)" . "-")
                  ("b)" . "-")
                  ("A." . "-")
                  ("B." . "-")
                  ("a." . "-")
                  ("b." . "-"))))
   #+end_src
- Nice looking bullets
  #+begin_src emacs-lisp
    (use-package org-bullets
      :custom
      (org-bullets-bullet-list '("◉" "☯" "○" "☯" "✸" "☯" "✿" "☯" "✜" "☯" "◆" "☯" "▶"))
      (org-ellipsis "⤵")
      :hook (org-mode . org-bullets-mode))
  #+end_src
- Some Unicode tricks
  From https://zzamboni.org/post/beautifying-org-mode-in-emacs/
  #+BEGIN_SRC emacs-lisp
    (setq org-hide-emphasis-markers t)
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([+]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "◦"))))))
   #+END_SRC
- Prettify src blocks
  Inspired by a comment in [[https://www.reddit.com/r/emacs/comments/9lpupc/i_use_markdown_rather_than_orgmode_for_my_notes/][i use markdown rather than org-mode for my notes : emacs]] I
  looked at the now builtin mode =prettify-symbols-mode=.. The configuration follows the
  example given in [[http://endlessparentheses.com/new-in-emacs-25-1-have-prettify-symbols-mode-reveal-the-symbol-at-point.html][New in Emacs 25.1: Have prettify-symbols-mode reveal the symbol at point · En...]].
  #+BEGIN_SRC emacs-lisp
    (setq-default prettify-symbols-alist '(("#+BEGIN_SRC" . "†")
                                           ("#+END_SRC" . "†")
                                           ("#+begin_src" . "†")
                                           ("#+end_src" . "†")))
    (setq prettify-symbols-unprettify-at-point 'right-edge)
    (add-hook 'org-mode-hook 'prettify-symbols-mode)
  #+END_SRC
- Some font setting for fixed-pitch
  #+BEGIN_SRC emacs-lisp
    (custom-theme-set-faces
     'user
     '(variable-pitch ((t (:family "Source Sans Pro" :height 120 :weight light))))
     '(fixed-pitch ((t ( :family "Consolas" :slant normal :weight normal :height 0.9 :width normal)))))

    (custom-theme-set-faces
     'user
     '(org-block                 ((t (:inherit fixed-pitch))))
     '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
     '(org-property-value        ((t (:inherit fixed-pitch))) t)
     '(org-special-keyword       ((t (:inherit (font-lock-comment-face fixed-pitch)))))
     '(org-tag                   ((t (:inherit (shadow fixed-pitch) :weight bold))))
     '(org-verbatim              ((t (:inherit (shadow fixed-pitch))))))
   #+END_SRC
***** Org Outline numbering
:PROPERTIES:
:CREATED:  [2018-10-25 Do 20:36]
:END:
:LOGBOOK:
- Note taken on [2018-12-02 So 19:59] \\
  =org-num= seems more reliable and will be part of org-mode in the future
:END:
Display an outline numbering as overlays on Org mode headlines. The numbering matches how
it would appear when exporting the org file.
#+BEGIN_SRC emacs-lisp
  (use-package org-num
    :load-path "lisp/"
    :after org
    :hook (org-mode . org-num-mode))
#+END_SRC
*** Todo-txt
    :LOGBOOK:
    - Note taken on [2018-06-04 Mo 22:16] \\
      Switched from todotxt to todotxt-mode. The former didn't work as expected and
      destroyed my todo-File
    - Note taken on [2016-12-11 So 11:52] \\
      Added
    :END:
    I switched from Google Tasks to todo.txt and will use Emacs on the PC for it.
    #+begin_src emacs-lisp
      (use-package todotxt-mode
        :demand t
        :config (setq todotxt-default-file (expand-file-name (concat cloud-dir "Todo/todo.txt"))
                      todotxt-default-archive-file (expand-file-name (concat cloud-dir "Todo/done.txt")))
        :bind ("C-c t" . todotxt-add-todo)
        ("C-c o" . todotxt-open-file))
    #+end_src
    Usage:

    TAB             dabbrev-expand
    x               todotxt-insert-x-maybe-complete

    C-c C-a         todotxt-send-to-reminders
    C-c C-d         todotxt-group-by-date
    C-c C-f         Prefix Command
    C-c C-p         todotxt-group-by-project
    C-c C-s         Prefix Command
    C-c C-t         todotxt-group-by-tag
    C-c a           todotxt-pri-a
    C-c b           todotxt-pri-b
    C-c c           todotxt-pri-c
    C-c d           todotxt-toggle-done
    C-c n           todotxt-nopri
    C-c p           todotxt-pri
    C-c t           todotxt-add-todo

    C-c C-s d       todotxt-sort-by-status
    C-c C-s n       todotxt-sort-by-creation-date
    C-c C-s p       todotxt-sort-by-project

    C-c C-f -       todotxt-clear-filter
    C-c C-f @       todotxt-filter-by-person
    C-c C-f d       todotxt-filter-by-status
    C-c C-f p       todotxt-filter-by-project
    C-c C-f t       todotxt-filter-by-tag
* Programming
*** JS2 Mode
    :LOGBOOK:
    - Note taken on [2015-04-12 So 16:23] \\
      Added for Javascript editing
    :END:
    According to Emacswiki =JS2-mode= is an improvement over js.
  #+begin_src emacs-lisp
    (use-package js2-mode
    :config (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
    )
  #+end_src
*** LESS-CSS
    :LOGBOOK:
    - Note taken on [2018-02-26 Mo 22:51] \\
        No longer needed
    :END:
    I use it as part of bones development.
    #+begin_src emacs-lisp
    ;(require 'less-css-mode)
    #+end_src
*** Magit
:PROPERTIES:
:CREATED:  [2018-09-29 Sa 17:40]
:END:
Everyone recommends magit so I'll try it. It requires a little tweaking to work with SSH
at least on Windows see https://github.com/magit/magit/wiki/Pushing-with-Magit-from-Windows.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind (("C-x g" . magit-status))
    :config
    (setq magit-diff-use-overlays nil))

  (cond ((eq system-type 'windows-nt)
         (use-package ssh-agency)
         (setenv "SSH_ASKPASS" "git-gui--askpass")))
    #+END_SRC
*** PHP Mode
    #+begin_src emacs-lisp
      (use-package php-mode
        :hook (php-mode . (lambda () (define-abbrev php-mode-abbrev-table "ex" "extends"))))
    #+end_src

    To use abbrev-mode, add lines like this:
    (add-hook 'php-mode-hook
        '(lambda () (define-abbrev php-mode-abbrev-table "ex" "extends")))
*** Plantuml
    Great tool to create UML and other diagrams.
    #+begin_src emacs-lisp
    (use-package plantuml-mode
    :config (setq plantuml-output-type "png")
    :mode ("\\.puml\\'" . plantuml-mode))
    #+end_src
*** Rainbow delimiters mode
:LOGBOOK:
- Note taken on [2018-09-28 Fr 18:55] \\
  rainbow-mode itself doesn't work and ins't useful for me. I removed it
- Note taken on [2018-09-28 Fr 18:42] \\
  rainbow-delimiters need to be activated for prog-modes
- Note taken on [2018-05-13 So 21:13] \\
  Added from http://www.star.bris.ac.uk/bjm/emacs.html
:END:
    Can be useful to check brackets etc.
    #+begin_src emacs-lisp
      (use-package rainbow-delimiters
        :init
        (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
    #+end_src
*** Web Mode
    =web-mode.el= is an autonomous emacs major-mode for editing web templates:
    HTML documents embedding parts (CSS / JavaScript) and blocks (client / server side). I
    also use it for editing plain HTML files.
    #+begin_src emacs-lisp
    (use-package web-mode
    :mode (("\\.handlebars\\'" . web-mode) ("\\.html?\\'" . web-mode))
    )
    #+end_src
* Some useful functions and advice
*** Advices for =kill-ring-save= and =kill-region=
    #+begin_src emacs-lisp
      (defadvice kill-ring-save (before slick-copy activate compile)
      "When called interactively with no active region, copy a single
      line instead."
      (interactive (if mark-active (list (region-beginning) (region-end)) (message
      "Copied line") (list (line-beginning-position) (line-beginning-position
      2)))))

      (defadvice kill-region (before slick-cut activate compile)
      "When called interactively with no active region, kill a single line instead."
      (interactive
        (if mark-active (list (region-beginning) (region-end))
          (list (line-beginning-position)
            (line-beginning-position 2)))))
    #+end_src

*** Use Ido to open recent files
:LOGBOOK:
- Note taken on [2018-09-30 So 20:45] \\
  I'll try ivy/counsel instead for now. The keybinding is set via use-package for counsel
:END:
    #+begin_src emacs-lisp
      (defun ido-recentf-open ()
        "Use `ido-completing-read' to \\[find-file] a recent file"
        (interactive)
        (if (find-file (ido-completing-read "Find recent file: " recentf-list))
            (message "Opening file...")
          (message "Aborting")))

 ;    (global-set-key "\C-x\C-r" 'ido-recentf-open)
    #+end_src

*** Don't ask if a buffer visits a running process during killing emacs. =remq= removes the relevant function
    :LOGBOOK:
    - Note taken on [2013-07-13 Sa 20:11] \\
      Added
    :END:
    #+begin_src emacs-lisp
    (setq kill-buffer-query-functions
    (remq 'process-kill-buffer-query-function
    kill-buffer-query-functions))
    #+end_src

*** Insert date
    :LOGBOOK:
    - Note taken on [2018-04-29 So 20:30] \\
      Added and changed key C-c d from deft to insert-date
    :END:
    #+begin_src emacs-lisp
    (defun insert-date (prefix)
    "Insert the current date. With prefix-argument, use ISO format. With
    two prefix arguments, add time."
    (interactive "P")
    (let ((format (cond
    ((not prefix) "%x")
    ((equal prefix '(4)) "%F")
    ((equal prefix '(16)) "%F %R"))))
    (insert (format-time-string format))))

    (global-set-key (kbd "C-c d") 'insert-date)
    #+end_src
*** Unsplit-line
:PROPERTIES:
:CREATED:  [2018-10-25 Do 21:17]
:END:
Useful function to join lines from [[http://whattheemacsd.com/key-bindings.el-03.html][What the .emacs.d!?]]
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-j")
                (lambda ()
                  (interactive)
                  (join-line -1)))
#+END_SRC
*** Toggle between horizontal and vertical window split
:PROPERTIES:
:CREATED:  [2018-10-25 Do 21:19]
:END:
Also from [[http://whattheemacsd.com/buffer-defuns.el-03.html][What the .emacs.d!?]]
#+BEGIN_SRC emacs-lisp
(defun toggle-window-split ()
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
             (next-win-buffer (window-buffer (next-window)))
             (this-win-edges (window-edges (selected-window)))
             (next-win-edges (window-edges (next-window)))
             (this-win-2nd (not (and (<= (car this-win-edges)
                                         (car next-win-edges))
                                     (<= (cadr this-win-edges)
                                         (cadr next-win-edges)))))
             (splitter
              (if (= (car this-win-edges)
                     (car (window-edges (next-window))))
                  'split-window-horizontally
                'split-window-vertically)))
        (delete-other-windows)
        (let ((first-win (selected-window)))
          (funcall splitter)
          (if this-win-2nd (other-window 1))
          (set-window-buffer (selected-window) this-win-buffer)
          (set-window-buffer (next-window) next-win-buffer)
          (select-window first-win)
          (if this-win-2nd (other-window 1))))))
#+END_SRC
